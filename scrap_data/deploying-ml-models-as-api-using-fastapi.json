[
  {
    "input": "Deploying our ML Model:",
    "output": "Building Our Model:\nFor this tutorial, we are going to use GuassianNB as our model and iris dataset to train our model on. To build and train our model we use the following code:\nNow that we have our model ready we need to define the format of the data we are going to provide to our model to make the predictions. This step is import because our model works on numerical data, and we don't want to feed the data of any other type to our model, in order to do this we need to validate that the data we receive follows that norm.\nThe Request Body:\nThe data sent from the client side to the API is called arequest body.The data sent from API to the client is called aresponse body.\nTo define ourrequest bodywe'll use BaseModel ,inpydanticmodule, and define the format of the data we'll send to the API. To define ourrequest body,we'll create a class that inherits BaseModel and define the features as the attributes of that class along with their type hints. What pydantic does is that it defines these type hints during runtime and generates an error when data is invalid. So let's create our request_body class:-\nNow that we have a request body all that's left to do is to add an endpoint that'll predict the class and return it as a response :\nAnd there we have our ML model deployed as an API. Now all that's left to do is test it out.\nTesting our API:\nTo test our API we'll be using Swagger UI now to access that you'll just need to add/docsat the end of your path. So go tohttp://127.0.0.1:8000/docs.And you should see the following output:\nNow click on theTry it Outbutton and enter the data you want the prediction for:\nAfter you've entered all the values click onExecute,after this you can see your output under the responses section:\nAnd as you can see we got our class as the response. And with that we have successfully deployed our ML model as an API using FastAPI."
  }
]