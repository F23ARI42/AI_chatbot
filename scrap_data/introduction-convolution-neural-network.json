[
  {
    "input": "How Convolutional Layers Works?",
    "output": "Convolution Neural Networks are neural networks that share their parameters.\nImagine you have an image. It can be represented as a cuboid having its length, width (dimension of the image), and height (i.e the channel as images generally have red, green, and blue channels).\n\n\nNow imagine taking a small patch of this image and running a small neural network, called a filter or kernel on it, with say, K outputs and representing them vertically.\nNow slide that neural network across the whole image, as a result, we will get another image with different widths, heights, and depths. Instead of just R, G, and B channels now we have more channels but lesser width and height. This operation is calledConvolution. If the patch size is the same as that of the image it will be a regular neural network. Because of this small patch, we have fewer weights."
  },
  {
    "input": "Mathematical Overview of Convolution",
    "output": "Now let’s talk about a bit of mathematics that is involved in the whole convolution process.\nConvolution layers consist of a set of learnable filters (or kernels) having small widths and heights and the same depth as that of input volume (3 if the input layer is image input).\nFor example, if we have to run convolution on an image with dimensions 34x34x3. The possible size of filters can be axax3, where ‘a’ can be anything like 3, 5, or 7 but smaller as compared to the image dimension.\nDuring the forward pass, we slide each filter across the whole input volume step by step where each step is calledstride(which can have a value of 2, 3, or even 4 for high-dimensional images) and compute the dot product between the kernel weights and patch from input volume.\nAs we slide our filters we’ll get a 2-D output for each filter and we’ll stack them together as a result, we’ll get output volume having a depth equal to the number of filters. The network will learn all the filters."
  },
  {
    "input": "Layers Used to Build ConvNets",
    "output": "A complete Convolution Neural Networks architecture is also known as covnets. A covnets is a sequence of layers, and every layer transforms one volume to another through a differentiable function.\nLet’s take an example by running a covnets on of image of dimension 32 x 32 x 3.\nInput Layers:It’s the layer in which we give input to our model. In CNN, Generally, the input will be an image or a sequence of images. This layer holds the raw input of the image with width 32, height 32, and depth 3.\nConvolutional Layers:This is the layer, which is used to extract the feature from the input dataset. It applies a set of learnable filters known as the kernels to the input images. The filters/kernels are smaller matrices usually 2x2, 3x3, or 5x5 shape. it slides over the input image data and computes the dot product between kernel weight and the corresponding input image patch. The output of this layer is referred as feature maps. Suppose we use a total of 12 filters for this layer we’ll get an output volume of dimension 32 x 32 x 12.\nActivation Layer: By adding an activation function to the output of the preceding layer, activation layers add nonlinearity to the network. it will apply an element-wise activation function to the output of the convolution layer. Some common activation functions areRELU: max(0, x),Tanh,Leaky RELU, etc. The volume remains unchanged hence output volume will have dimensions 32 x 32 x 12.\nPooling layer: This layer is periodically inserted in the covnets and its main function is to reduce the size of volume which makes the computation fast reduces memory and also prevents overfitting. Two common types of pooling layers aremax poolingandaverage pooling. If we use a max pool with 2 x 2 filters and stride 2, the resultant volume will be of dimension 16x16x12.\n\nFlattening:The resulting feature maps are flattened into a one-dimensional vector after the convolution and pooling layers so they can be passed into a completely linked layer for categorization or regression.\nFully Connected Layers:It takes the input from the previous layer and computes the final classification or regression task.\nOutput Layer:The output from the fully connected layers is then fed into a logistic function for classification tasks like sigmoid or softmax which converts the output of each class into the probability score of each class."
  },
  {
    "input": "Example: Applying CNN to an Image",
    "output": "Let's consider an image and apply the convolution layer, activation layer, and pooling layer operation to extract the inside feature.\nInput image:\nimport the necessary libraries\nset the parameter\ndefine the kernel\nLoad the image and plot it.\nReformat the image\nApply convolution layer operation and plot the output image.\nApply activation layer operation and plot the output image.\nApply pooling layer operation and plot the output image.\nOutput:"
  }
]